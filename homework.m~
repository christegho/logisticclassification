function homework()
clear all;
close all;
clc;
load('classification.mat');

%Divide targets into 2 sets using random indices
testInd = randi(1000,100,1);
trainInd = 1:1000;
trainInd(testInd) = 0;
trainInd = trainInd(trainInd!=0);

testX = X(testInd,:);
trainX = X(trainInd,:);
testy = y(testInd,:);
trainy = y(trainInd,:);

[theta, logLik] = trainLogClass(trainX, trainy, 100, 0.5);
theta
trainlogLik = logLik(100)

figure
plot(exp(logLik));

lr = 0.1:0.5:4
logLik = zeros(30,lr);
for k = 1: length(lr)
[theta, logLik(:,k)] = trainLogClass(trainX, trainy, 30, k);
end
figure
plot(logLik);
legend('show');
% Add ones to the X data matrix
testX = [ones(size(testX, 1), 1) testX];

testh=sigmoid(testX*theta);

trueanswers = sum((testh>0.5)==testy)

%likelihood for test data
m = size(testX, 1)
testLogLik = sum(testy.*log(testh)+(ones(size(testy))-testy).*log(ones(size(testy))-testh))/m

%confusion matrix
printf('---confusion matrix - rates----');
printf('');
predictions = testh>0.5;
indexTestPos = predictions(find(testy));
indexTestNeg = predictions(find(~testy));
lengthTestPos = length(find(testy));
lengthTestNeg = length(find(~testy));
tp = sum(indexTestPos)/lengthTestPos
fp = sum(indexTestNeg)/lengthTestNeg
fn = 1-tp
tn = 1-fp 

printf('---confusion matrix----');
printf('');
tp = sum(indexTestPos)
fp = sum(indexTestNeg)
fn = lengthTestPos-tp
tn = lengthTestNeg-fp 


printf('-----------------');

%compute ROC curve
threshold = 0:0.1:1;

trueanswers = sum((testh>threshold)==testy)/length(testy);
figure 
plot(trueanswers)
tp = zeros(size(threshold));
fp = zeros(size(threshold));

predictions = testh>threshold;

for k = 1:length(threshold)
  indexTestPos = predictions(:,k)(find(testy));
  indexTestNeg = predictions(:,k)(find(~testy));
  tp(k) = sum(indexTestPos)/length(find(testy));
  fp(k) = sum(indexTestNeg)/length(find(~testy));

end
figure
plot(tp,fp);
xlabel('false positive rate');
ylabel('true positive rate');




printf('--------------PART2-------------');
printf('-------------PART2-------------');
printf('-------------PART2-------------');
fprintf('');
%--------------PART2-------------
X=getRBF(X,0.01);
m = size(X, 1);

% Add ones to the X data matrix
X = [ones(m, 1) X];
testX = X(testInd,:);
trainX = X(trainInd,:);
testy = y(testInd,:);
trainy = y(trainInd,:);


testX = X(testInd,:);
trainX = X(trainInd,:);
testy = y(testInd,:);
trainy = y(trainInd,:);
%verification
theta1 = trainLC(trainX,trainy)
h=sigmoid(testX*theta1);
ta2 = sum((h>0.5)==testy)
%test
[theta, logLik] = trainLogClass(trainX, trainy, 50000, 4);
theta;
trainlogLik = logLik(200)

figure
plot(exp(logLik));

% Add ones to the X data matrix
testX = [ones(size(testX, 1), 1) testX];

testh=sigmoid(testX*theta);

trueanswers = sum((testh>0.5)==testy)


%confusion matrix
printf('---confusion matrix - rates----');
printf('');
predictions = testh>0.5;
indexTestPos = predictions(find(testy));
indexTestNeg = predictions(find(~testy));
lengthTestPos = length(find(testy));
lengthTestNeg = length(find(~testy));
tp = sum(indexTestPos)/lengthTestPos
fp = sum(indexTestNeg)/lengthTestNeg
fn = 1-tp
tn = 1-fp 

printf('---confusion matrix----');
printf('');
tp = sum(indexTestPos)
fp = sum(indexTestNeg)
fn = lengthTestPos-tp
tn = lengthTestNeg-fp 


printf('-----------------');
